generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id                     Int                       @id @default(autoincrement())
  email                  String                    @unique
  name                   String
  password               String
  createdAt              DateTime                  @default(now())
  isActive               Boolean                   @default(true)
  lastLoginAt            DateTime?
  role                   UserRole                  @default(USER)
  updatedAt              DateTime                  @default(now())
  adminActions           AdminAction[]
  movieRequests          MovieRequest[]
  reviews                Review[]
  processedRegistrations UserRegistrationRequest[]

  @@map("users")
}

model AdminAction {
  id           Int      @id @default(autoincrement())
  action       String
  targetUserId Int?
  details      String?
  adminId      Int
  createdAt    DateTime @default(now())
  admin        User     @relation(fields: [adminId], references: [id], onDelete: Cascade)

  @@map("admin_actions")
}

model Movie {
  id                 Int          @id @default(autoincrement())
  tmdbId             Int?         @unique
  title              String
  synopsis           String
  posterUrl          String
  trailerUrl         String?
  releaseDate        DateTime
  duration           Int
  rating             Float?
  isWeeklySuggestion Boolean      @default(false)
  localPath          String?
  filename           String?
  resolution         String?
  codec              String?
  container          String?
  lastScanned        DateTime?
  createdAt          DateTime     @default(now())
  updatedAt          DateTime     @updatedAt
  fileSize           BigInt?
  actors             MovieActor[]
  genres             MovieGenre[]
  reviews            Review[]

  @@map("movies")
}

model Genre {
  id     Int          @id @default(autoincrement())
  name   String       @unique
  movies MovieGenre[]

  @@map("genres")
}

model Actor {
  id         Int          @id @default(autoincrement())
  name       String       @unique
  profileUrl String?
  movies     MovieActor[]

  @@map("actors")
}

model MovieGenre {
  movieId Int
  genreId Int
  genre   Genre @relation(fields: [genreId], references: [id], onDelete: Cascade)
  movie   Movie @relation(fields: [movieId], references: [id], onDelete: Cascade)

  @@id([movieId, genreId])
  @@map("movie_genres")
}

model MovieActor {
  movieId   Int
  actorId   Int
  character String?
  actor     Actor   @relation(fields: [actorId], references: [id], onDelete: Cascade)
  movie     Movie   @relation(fields: [movieId], references: [id], onDelete: Cascade)

  @@id([movieId, actorId])
  @@map("movie_actors")
}

model Review {
  id        Int      @id @default(autoincrement())
  rating    Float
  comment   String
  createdAt DateTime @default(now())
  movieId   Int
  authorId  Int
  author    User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
  movie     Movie    @relation(fields: [movieId], references: [id], onDelete: Cascade)

  @@unique([movieId, authorId])
  @@map("reviews")
}

model MovieRequest {
  id          Int      @id @default(autoincrement())
  title       String
  comment     String?
  requestedAt DateTime @default(now())
  status      String   @default("pending")
  updatedAt   DateTime @updatedAt
  userId      Int
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("movie_requests")
}

model UserRegistrationRequest {
  id          Int                @id @default(autoincrement())
  email       String
  name        String
  status      RegistrationStatus @default(PENDING)
  requestedAt DateTime           @default(now())
  processedAt DateTime?
  adminNotes  String?
  adminId     Int?
  admin       User?              @relation(fields: [adminId], references: [id])

  @@map("user_registration_requests")
}

enum UserRole {
  USER
  ADMIN
}

enum RegistrationStatus {
  PENDING
  APPROVED
  REJECTED
}
