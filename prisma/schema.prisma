// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  name      String
  password  String   // Hash du mot de passe
  createdAt DateTime @default(now())
  reviews   Review[]

  @@map("users")
}

model Movie {
  id          Int      @id @default(autoincrement())
  title       String   @unique
  synopsis    String   @db.Text
  posterUrl   String
  trailerUrl  String?  // URL de la bande-annonce (ex: YouTube)
  releaseDate DateTime
  duration    Int      // Durée en minutes
  isWeeklySuggestion Boolean @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  genres  Genre[]
  actors  Actor[]
  reviews Review[]

  @@map("movies")
}

model Genre {
  id     Int     @id @default(autoincrement())
  name   String  @unique
  movies Movie[]

  @@map("genres")
}

model Actor {
  id     Int     @id @default(autoincrement())
  name   String  @unique
  movies Movie[]

  @@map("actors")
}

model Review {
  id        Int      @id @default(autoincrement())
  rating    Float    // Note de 1 à 5
  comment   String   @db.Text
  createdAt DateTime @default(now())

  movieId Int
  movie   Movie @relation(fields: [movieId], references: [id], onDelete: Cascade)
  
  authorId Int
  author   User  @relation(fields: [authorId], references: [id], onDelete: Cascade)

  @@unique([movieId, authorId]) // Un utilisateur ne peut avoir qu'une critique par film
  @@map("reviews")
}

model MovieRequest {
  id          Int      @id @default(autoincrement())
  title       String
  description String?
  createdAt   DateTime @default(now())

  @@map("movie_requests")
}
