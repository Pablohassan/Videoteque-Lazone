import chokidar, { FSWatcher } from "chokidar";
import path from "path";
import fs from "fs";
import { movieIndexingService } from "./movieIndexingService.js";
import {
  validateFolderPath,
  WatcherOptionsSchema,
  type WatcherOptions,
} from "../schemas/movies.js";
import {
  createWatcherStartFailedError,
  createWatcherStopFailedError,
  createWatcherAlreadyRunningError,
  createWatcherNotRunningError,
  createMovieFolderNotFoundError,
  createMovieFolderNotAccessibleError,
  createInvalidFileExtensionError,
  createFileNotAccessibleError,
} from "../utils/errors.js";

// Utiliser le type WatcherOptions import√© du sch√©ma
// interface WatcherOptions est maintenant d√©finie dans schemas/movies.ts

/**
 * Service de surveillance automatique des fichiers de films
 * Utilise Chokidar pour d√©tecter les nouveaux fichiers et les indexer automatiquement
 */
export class MovieWatcherService {
  private watcher: FSWatcher | null = null;
  private isRunning = false;
  private processingQueue = new Set<string>();
  private debounceTimers = new Map<string, NodeJS.Timeout>();

  // M√©triques de performance
  private startTime: number = 0;
  private watcherReady: boolean = false;
  private eventsProcessed: number = 0;
  private errorsCount: number = 0;
  private totalProcessingTime: number = 0;

  private options: Required<WatcherOptions> = {
    watchPath: movieIndexingService.getMoviesFolderPath(), // Chemin relatif pour la validation
    extensions: [
      ".mp4",
      ".mkv",
      ".avi",
      ".mov",
      ".wmv",
      ".flv",
      ".webm",
      ".m4v",
    ],
    debounceMs: 2000, // 2 secondes
    recursive: true,
    ignoreInitial: true,
    ignored: [
      /(^|[/\\])\../, // Fichiers/dossiers cach√©s (.DS_Store, .tmp, etc.)
      /.*\.tmp$/, // Fichiers temporaires
      /.*\.temp$/,
      /.*\.swp$/, // Fichiers vim
      /.*~$/, // Fichiers backup
      /Thumbs\.db$/, // Windows thumbnails
      /Desktop\.ini$/, // Windows metadata
      /node_modules/, // Dossiers de d√©pendances
      /\.git/, // Dossiers git
    ],
    awaitWriteFinish: {
      stabilityThreshold: 1000,
      pollInterval: 100,
    },
  };

  constructor(options?: WatcherOptions) {
    if (options) {
      this.options = { ...this.options, ...options };
    }
  }

  /**
   * D√©marrer la surveillance automatique
   */
  async start(): Promise<void> {
    if (this.isRunning) {
      throw createWatcherAlreadyRunningError();
    }

    try {
      // Forcer la revalidation du chemin au cas o√π les variables d'environnement ont chang√©
      const currentPath = movieIndexingService.getMoviesFolderPath();
      console.log(`üîç [MovieWatcherService] Chemin actuel: ${currentPath}`);
      console.log(
        `üìã [MovieWatcherService] Est-ce absolu ? ${path.isAbsolute(
          currentPath
        )}`
      );

      // Mettre √† jour les options avec le chemin actuel
      this.options.watchPath = currentPath;

      // Valider et v√©rifier l'acc√®s au dossier
      await validateFolderPath(this.options.watchPath);

      console.log(`üëÄ D√©marrage de la surveillance automatique:`);
      console.log(`   üìÅ Dossier: ${this.options.watchPath}`);
      console.log(`   üé¨ Extensions: ${this.options.extensions.join(", ")}`);
      console.log(
        `   üîÑ Mode r√©cursif: ${this.options.recursive ? "Oui" : "Non"}`
      );
      console.log(`   ‚è±Ô∏è  D√©lai anti-rebond: ${this.options.debounceMs}ms`);

      // Configuration Chokidar optimis√©e selon les best practices 2025
      const watcherOptions = {
        // Persistence et stabilit√©
        persistent: true,
        ignoreInitial: true,

        // Attendre la fin des √©critures pour √©viter les √©v√©nements multiples
        awaitWriteFinish: {
          stabilityThreshold: 2000, // Augment√© pour plus de stabilit√©
          pollInterval: 200, // Poll moins fr√©quent pour √©conomiser CPU
        },

        // Gestion de la profondeur r√©cursive - SOLUTION FINALE
        // Utiliser Infinity pour une surveillance r√©cursive explicite et compl√®te
        depth: this.options.recursive ? Infinity : 0,

        // Optimisations pour les gros volumes
        useFsEvents: true, // Utiliser les √©v√©nements FS natifs quand disponibles
        usePolling: false, // √âviter le polling sauf si n√©cessaire
        interval: 100, // Intervalle de polling si utilis√©

        // Patterns √† ignorer pour de meilleures performances
        ignored: [
          /(^|[/\\])\../, // Fichiers/dossiers cach√©s (.DS_Store, .tmp, etc.)
          /.*\.tmp$/, // Fichiers temporaires
          /.*\.temp$/,
          /.*\.swp$/, // Fichiers vim
          /.*~$/, // Fichiers backup
          /Thumbs\.db$/, // Windows thumbnails
          /Desktop\.ini$/, // Windows metadata
          /node_modules/, // Dossiers de d√©pendances
          /\.git/, // Dossiers git
        ],

        // Gestion atomique des fichiers
        atomic: true, // √âviter les √©v√©nements sur les copies atomiques partielles

        // Optimisation m√©moire pour les gros volumes
        alwaysStat: false, // Ne pas r√©cup√©rer les stats automatiquement
        followSymlinks: false, // Ne pas suivre les liens symboliques
      };

      // Cr√©er le watcher avec le chemin absolu (n√©cessaire pour Chokidar)
      const absoluteWatchPath =
        movieIndexingService.getMoviesFolderAbsolutePath();
      console.log(`üîç D√©marrage de Chokidar sur: ${absoluteWatchPath}`);
      this.watcher = chokidar.watch(absoluteWatchPath, watcherOptions);

      // √âv√©nements √† √©couter selon les best practices Chokidar 2025
      this.watcher.on("ready", () => {
        this.watcherReady = true;
        console.log(
          `‚úÖ Surveillance Chokidar pr√™te - ${this.options.watchPath}`
        );
        console.log(
          `üìä Surveillance de ${
            Object.keys(this.watcher?.getWatched() || {}).length
          } dossiers`
        );
      });

      // Les √©v√©nements sont g√©r√©s plus bas avec les logs de debug
      this.watcher.on("change", this.handleFileChanged.bind(this));
      this.watcher.on("unlink", this.handleFileRemoved.bind(this));

      // Gestion d'erreur am√©lior√©e selon les best practices Chokidar
      this.watcher.on("error", (err: unknown) => {
        this.errorsCount++;

        // Gestion sp√©cifique des erreurs Chokidar
        if (err instanceof Error) {
          if (err.message.includes("EPERM") || err.message.includes("EACCES")) {
            console.error("‚ùå Erreur de permissions Chokidar:", err.message);
          } else if (err.message.includes("ENOENT")) {
            console.error("‚ùå Dossier surveill√© supprim√©:", err.message);
          } else if (err.message.includes("EMFILE")) {
            console.error("‚ùå Trop de fichiers ouverts:", err.message);
          } else {
            console.error("‚ùå Erreur Chokidar:", err.message);
          }
        } else {
          console.error("‚ùå Erreur Chokidar inconnue:", err);
        }

        this.handleError(err instanceof Error ? err : new Error(String(err)));
      });

      // √âv√©nements de debug pour le d√©veloppement (peuvent √™tre d√©sactiv√©s en prod)
      if (process.env.NODE_ENV === "development") {
        this.watcher.on("all", (event, filePath) => {
          console.log(`üîç [Chokidar:${event}] ${filePath}`);
          console.log(
            `üîç [Chokidar:${event}] R√©solu: ${path.resolve(filePath)}`
          );
        });
      }

      // Gestionnaire pour les nouveaux fichiers avec logs de debug
      this.watcher.on("add", (filepath) => {
        console.log(`üö® [ADD EVENT] Fichier ajout√© d√©tect√©: ${filepath}`);
        console.log(`üö® [ADD EVENT] Type: ${typeof filepath}`);
        console.log(`üö® [ADD EVENT] Longueur: ${filepath.length}`);
        console.log(`üö® [ADD EVENT] Est absolu: ${path.isAbsolute(filepath)}`);

        // Appeler le vrai gestionnaire
        this.handleFileAdded(filepath);
      });

      this.isRunning = true;
      this.startTime = Date.now();

      console.log(
        `‚úÖ Surveillance automatique d√©marr√©e avec succ√®s sur ${this.options.watchPath}`
      );
    } catch (error) {
      console.error("‚ùå Erreur lors du d√©marrage de la surveillance:", error);
      throw error;
    }
  }

  /**
   * Arr√™ter la surveillance automatique
   */
  async stop(): Promise<void> {
    if (!this.isRunning || !this.watcher) {
      throw createWatcherNotRunningError();
    }

    try {
      // Nettoyer les timers en cours
      for (const timer of this.debounceTimers.values()) {
        clearTimeout(timer);
      }
      this.debounceTimers.clear();

      // Fermer le watcher
      await this.watcher.close();
      this.watcher = null;
      this.isRunning = false;

      console.log("üõë Surveillance automatique arr√™t√©e");
    } catch (error) {
      console.error("‚ùå Erreur lors de l'arr√™t de la surveillance:", error);
      throw error;
    }
  }

  /**
   * Red√©marrer la surveillance (utile pour changer de dossier)
   */
  async restart(options?: WatcherOptions): Promise<void> {
    if (options) {
      this.options = { ...this.options, ...options };
    }

    await this.stop();
    await this.start();
  }

  /**
   * V√©rifier si le service est en cours d'ex√©cution
   */
  isActive(): boolean {
    return this.isRunning;
  }

  /**
   * Mettre √† jour la configuration du service (utile apr√®s chargement des variables d'environnement)
   */
  updateConfiguration(newOptions: Partial<WatcherOptions>): void {
    const updatedOptions = { ...this.options, ...newOptions };

    // Si le chemin a chang√©, red√©marrer la surveillance
    if (
      newOptions.watchPath &&
      newOptions.watchPath !== this.options.watchPath
    ) {
      // S'assurer que le nouveau chemin est relatif et valide
      const currentPath = movieIndexingService.getMoviesFolderPath();
      console.log(
        `üîÑ Reconfiguration du dossier surveill√©: ${currentPath} (depuis ${newOptions.watchPath})`
      );

      // Mettre √† jour avec le chemin relatif valid√©
      const updatedOptionsWithRelativePath = {
        ...updatedOptions,
        watchPath: currentPath,
      };

      this.options = { ...this.options, ...updatedOptionsWithRelativePath };

      // Red√©marrer si le service est en cours d'ex√©cution
      if (this.isRunning) {
        this.stop().then(() => {
          this.start();
        });
      }
    } else {
      this.options = { ...this.options, ...updatedOptions };
    }
  }

  /**
   * Obtenir les statistiques de surveillance avec m√©triques avanc√©es (Best Practice 2025)
   */
  getStats(): {
    isRunning: boolean;
    watchPath: string;
    processingQueueSize: number;
    activeTimers: number;
    watchedFiles?: string[];
    watcherReady?: boolean;
    performanceMetrics: {
      eventsProcessed: number;
      errorsCount: number;
      averageProcessingTime: number;
      uptimeSeconds: number;
      memoryUsage: NodeJS.MemoryUsage;
      watcherInfo: {
        watchedPathsCount: number;
        ignoredPatterns: string[];
      };
    };
    chokidarConfig: {
      recursive: boolean;
      debounceMs: number;
      extensions: string[];
      ignoredCount: number;
    };
  } {
    const uptime = this.startTime ? (Date.now() - this.startTime) / 1000 : 0;
    const watched = this.watcher?.getWatched() || {};

    return {
      isRunning: this.isRunning,
      watchPath: this.options.watchPath,
      processingQueueSize: this.processingQueue.size,
      activeTimers: this.debounceTimers.size,
      watchedFiles: Object.keys(watched),
      watcherReady: this.watcherReady,
      performanceMetrics: {
        eventsProcessed: this.eventsProcessed,
        errorsCount: this.errorsCount,
        averageProcessingTime:
          this.totalProcessingTime / Math.max(this.eventsProcessed, 1),
        uptimeSeconds: uptime,
        memoryUsage: process.memoryUsage(),
        watcherInfo: {
          watchedPathsCount: Object.keys(watched).length,
          ignoredPatterns: (this.options.ignored || []).map((pattern) =>
            pattern instanceof RegExp ? pattern.toString() : pattern
          ),
        },
      },
      chokidarConfig: {
        recursive: this.options.recursive,
        debounceMs: this.options.debounceMs,
        extensions: this.options.extensions,
        ignoredCount: this.options.ignored?.length || 0,
      },
    };
  }

  /**
   * R√©initialiser les m√©triques de performance
   */
  resetMetrics(): void {
    this.eventsProcessed = 0;
    this.errorsCount = 0;
    this.totalProcessingTime = 0;
    console.log("üìä M√©triques de performance r√©initialis√©es");
  }

  /**
   * Obtenir le chemin relatif du dossier de films pour la base de donn√©es
   * @returns Le chemin relatif format√© pour la DB (ex: "../../Downloads/films/")
   */
  private getMoviesFolderRelativeForDB(): string {
    const absolutePath = movieIndexingService.getMoviesFolderAbsolutePath();
    const relativePath = path.relative(process.cwd(), absolutePath);
    // S'assurer qu'il se termine par un slash
    return relativePath.endsWith(path.sep)
      ? relativePath
      : relativePath + path.sep;
  }

  /**
   * V√©rifier la sant√© du watcher
   */
  getHealthStatus(): {
    healthy: boolean;
    issues: string[];
    recommendations: string[];
  } {
    const issues: string[] = [];
    const recommendations: string[] = [];

    // V√©rifier si le watcher est op√©rationnel
    if (!this.isRunning) {
      issues.push("Watcher non d√©marr√©");
      recommendations.push("Appeler start() pour d√©marrer la surveillance");
    }

    // V√©rifier si le watcher est pr√™t
    if (!this.watcherReady) {
      issues.push("Watcher pas encore pr√™t");
      recommendations.push("Attendre l'√©v√©nement 'ready' de Chokidar");
    }

    // V√©rifier les erreurs r√©centes
    if (this.errorsCount > 10) {
      issues.push(`Trop d'erreurs r√©centes (${this.errorsCount})`);
      recommendations.push("V√©rifier les permissions et la configuration");
    }

    // V√©rifier la file d'attente
    if (this.processingQueue.size > 50) {
      issues.push(
        `File d'attente surcharg√©e (${this.processingQueue.size} √©l√©ments)`
      );
      recommendations.push("Augmenter debounceMs ou optimiser le traitement");
    }

    // V√©rifier les timers actifs
    if (this.debounceTimers.size > 20) {
      issues.push(`Trop de timers actifs (${this.debounceTimers.size})`);
      recommendations.push("V√©rifier la logique de nettoyage des timers");
    }

    // V√©rifier la m√©moire
    const memUsage = process.memoryUsage();
    if (memUsage.heapUsed > 500 * 1024 * 1024) {
      // 500MB
      issues.push("Utilisation m√©moire √©lev√©e");
      recommendations.push("Monitorer les fuites m√©moire potentielles");
    }

    return {
      healthy: issues.length === 0,
      issues,
      recommendations,
    };
  }

  // ========================================================================
  // GESTIONNAIRES D'√âV√âNEMENTS
  // ========================================================================

  /**
   * Gestionnaire pour les nouveaux fichiers
   */
  private handleFileAdded(filepath: string): void {
    const startTime = Date.now();

    console.log(`üîç [DEBUG] √âv√©nement 'add' d√©clench√© pour: ${filepath}`);
    console.log(`üîç [DEBUG] Chemin absolu complet: ${path.resolve(filepath)}`);
    console.log(`üîç [DEBUG] Dossier surveill√©: ${this.options.watchPath}`);

    try {
      const ext = path.extname(filepath).toLowerCase();

      console.log(`üîç [DEBUG] Extension d√©tect√©e: ${ext}`);
      console.log(
        `üîç [DEBUG] Extensions support√©es: ${this.options.extensions.join(
          ", "
        )}`
      );

      if (
        !this.options.extensions.includes(
          ext as (typeof this.options.extensions)[number]
        )
      ) {
        console.log(`‚ö†Ô∏è [DEBUG] Extension ${ext} non support√©e - ignor√©`);
        // Extension non support√©e - ignorer silencieusement
        return;
      }

      console.log(`üìÅ Nouveau fichier d√©tect√©: ${path.basename(filepath)}`);
      this.eventsProcessed++;
      this.scheduleFileProcessing(filepath, "added");

      // Mesurer le temps de traitement
      this.totalProcessingTime += Date.now() - startTime;
    } catch (error) {
      this.errorsCount++;
      console.error(
        `‚ùå Erreur lors du traitement du fichier ajout√© ${filepath}:`,
        error
      );
    }
  }

  /**
   * Gestionnaire pour les fichiers modifi√©s
   */
  private handleFileChanged(filepath: string): void {
    const startTime = Date.now();

    try {
      const ext = path.extname(filepath).toLowerCase();

      if (
        !this.options.extensions.includes(
          ext as (typeof this.options.extensions)[number]
        )
      ) {
        // Extension non support√©e - ignorer silencieusement
        return;
      }

      console.log(`üîÑ Fichier modifi√©: ${path.basename(filepath)}`);
      this.eventsProcessed++;
      this.scheduleFileProcessing(filepath, "changed");

      // Mesurer le temps de traitement
      this.totalProcessingTime += Date.now() - startTime;
    } catch (error) {
      this.errorsCount++;
      console.error(
        `‚ùå Erreur lors du traitement du fichier modifi√© ${filepath}:`,
        error
      );
    }
  }

  /**
   * Gestionnaire pour les fichiers supprim√©s
   */
  private async handleFileRemoved(filepath: string): Promise<void> {
    const startTime = Date.now();

    try {
      const ext = path.extname(filepath).toLowerCase();

      if (
        !this.options.extensions.includes(
          ext as (typeof this.options.extensions)[number]
        )
      ) {
        // Extension non support√©e - ignorer silencieusement
        return;
      }

      const filename = path.basename(filepath);
      console.log(`üóëÔ∏è Fichier supprim√© d√©tect√©: ${filename}`);
      this.eventsProcessed++;

      // Traiter sp√©cifiquement le fichier supprim√©
      const { PrismaClient } = await import("@prisma/client");
      const prisma = new PrismaClient();

      try {
        // Calculer correctement le chemin relatif pour la base de donn√©es
        const moviesFolder = movieIndexingService.getMoviesFolderAbsolutePath();
        const relativeFromMovies = path.relative(moviesFolder, filepath);
        const dbFormatPath = `${this.getMoviesFolderRelativeForDB()}${relativeFromMovies}`;

        // Trouver et supprimer le film de la base de donn√©es
        const movie = await prisma.movie.findFirst({
          where: { localPath: dbFormatPath },
        });

        if (movie) {
          // Supprimer les relations many-to-many d'abord
          await prisma.movieGenre.deleteMany({
            where: { movieId: movie.id },
          });
          await prisma.movieActor.deleteMany({
            where: { movieId: movie.id },
          });
          await prisma.review.deleteMany({
            where: { movieId: movie.id },
          });

          // Supprimer le film
          await prisma.movie.delete({
            where: { id: movie.id },
          });

          console.log(`üóëÔ∏è Film supprim√©: ${movie.title}`);
        }

        // Mettre √† jour l'√©tat d'indexation
        const fs = await import("fs");
        const indexStateFile = path.join(
          process.cwd(),
          ".movie-index-state.json"
        );

        if (fs.existsSync(indexStateFile)) {
          const stateData = JSON.parse(
            fs.readFileSync(indexStateFile, "utf-8")
          );
          const currentFiles = new Set(stateData.lastIndexedFiles || []);

          // Supprimer le fichier de l'√©tat
          currentFiles.delete(dbFormatPath);

          // Sauvegarder le nouvel √©tat
          const newState = {
            lastIndexedFiles: Array.from(currentFiles),
            lastIndexTime: Date.now(),
          };

          fs.writeFileSync(indexStateFile, JSON.stringify(newState, null, 2));
          console.log(
            `üíæ √âtat d'indexation mis √† jour: ${currentFiles.size} fichiers restants`
          );
        }
      } finally {
        await prisma.$disconnect();
      }
    } catch (error) {
      console.error(
        `‚ùå Erreur lors du traitement du fichier supprim√© ${filepath}:`,
        error
      );
    }
  }

  /**
   * Nettoyer automatiquement tous les films orphelins
   */
  private async cleanOrphanedMovies(): Promise<void> {
    try {
      const { PrismaClient } = await import("@prisma/client");
      const fs = await import("fs");
      const path = await import("path");

      const prisma = new PrismaClient();
      const moviesFolder = movieIndexingService.getMoviesFolderAbsolutePath();

      try {
        // R√©cup√©rer tous les films qui ont encore un localPath
        const dbMovies = await prisma.movie.findMany({
          where: { localPath: { not: null } },
          select: { id: true, title: true, localPath: true, filename: true },
        });

        let orphanedCount = 0;

        for (const movie of dbMovies) {
          if (!movie.localPath) continue;

          // V√©rifier si le fichier existe encore
          const moviesFolder =
            movieIndexingService.getMoviesFolderAbsolutePath();
          const relativePath = movie.localPath.replace(
            this.getMoviesFolderRelativeForDB(),
            ""
          );
          const absolutePath = path.join(moviesFolder, relativePath);

          if (!fs.existsSync(absolutePath)) {
            // Supprimer le film orphelin
            await prisma.movieGenre.deleteMany({
              where: { movieId: movie.id },
            });
            await prisma.movieActor.deleteMany({
              where: { movieId: movie.id },
            });
            await prisma.review.deleteMany({
              where: { movieId: movie.id },
            });
            await prisma.movie.delete({
              where: { id: movie.id },
            });

            console.log(`üóëÔ∏è Film orphelin supprim√©: ${movie.title}`);
            orphanedCount++;
          }
        }

        if (orphanedCount > 0) {
          console.log(`‚úÖ ${orphanedCount} films orphelins nettoy√©s`);
        }
      } finally {
        await prisma.$disconnect();
      }
    } catch (error) {
      console.error("‚ùå Erreur lors du nettoyage des orphelins:", error);
    }
  }

  /**
   * Gestionnaire d'erreurs
   */
  private handleError(error: Error): void {
    console.error("‚ùå Erreur de surveillance:", error);
  }

  // ========================================================================
  // LOGIQUE DE TRAITEMENT AVEC ANTI-REBOND
  // ========================================================================

  /**
   * Programmer le traitement d'un fichier avec anti-rebond
   * Impl√©mentation optimis√©e pour √©viter les memory leaks
   */
  private scheduleFileProcessing(
    filepath: string,
    eventType: "added" | "changed" | "manual"
  ): void {
    // Annuler le timer existant pour ce fichier
    const existingTimer = this.debounceTimers.get(filepath);
    if (existingTimer) {
      clearTimeout(existingTimer);
      this.debounceTimers.delete(filepath);
    }

    // Cr√©er un nouveau timer avec gestion d'erreur
    const timer = setTimeout(() => {
      try {
        this.processFile(filepath, eventType);
      } catch (error) {
        console.error(
          `‚ùå Erreur lors du traitement diff√©r√© de ${filepath}:`,
          error
        );
      } finally {
        // S'assurer que le timer est nettoy√© m√™me en cas d'erreur
        this.debounceTimers.delete(filepath);
      }
    }, this.options.debounceMs);

    // Stocker le timer avec une r√©f√©rence faible pour √©viter les memory leaks
    this.debounceTimers.set(filepath, timer);

    // Nettoyage automatique des timers expir√©s (garbage collection)
    this.cleanupExpiredTimers();
  }

  /**
   * Nettoyer automatiquement les timers expir√©s pour √©viter les memory leaks
   */
  private cleanupExpiredTimers(): void {
    // Nettoyer les timers qui ont d√©pass√© le d√©lai maximum
    const maxTimerAge = this.options.debounceMs * 2;
    const now = Date.now();

    for (const [filepath, timer] of this.debounceTimers.entries()) {
      // Cette v√©rification est approximative car on ne peut pas conna√Ætre
      // l'heure exacte de cr√©ation du timer, mais elle aide √† pr√©venir les leaks
      if (this.debounceTimers.size > 100) {
        // Seuil arbitraire pour le nettoyage
        console.warn(
          `üßπ Nettoyage des timers (${this.debounceTimers.size} actifs)`
        );
        clearTimeout(timer);
        this.debounceTimers.delete(filepath);
      }
    }
  }

  /**
   * Traiter un fichier (indexation)
   */
  private async processFile(
    filepath: string,
    eventType: "added" | "changed" | "manual"
  ): Promise<void> {
    const filename = path.basename(filepath);

    // V√©rifier si le fichier est d√©j√† en cours de traitement
    if (this.processingQueue.has(filepath)) {
      console.log(`‚è≥ ${filename} d√©j√† en cours de traitement, ignor√©`);
      return;
    }

    // V√©rifier que le fichier existe toujours (au cas o√π il aurait √©t√© supprim√© entre temps)
    if (!fs.existsSync(filepath)) {
      console.log(`‚ö†Ô∏è  ${filename} n'existe plus, ignor√©`);
      return;
    }

    // Ajouter √† la file de traitement
    this.processingQueue.add(filepath);

    try {
      console.log(`üé¨ D√©but de l'indexation de ${filename} (${eventType})`);

      // Indexer le fichier
      const result = await movieIndexingService.indexSingleFile(filepath);

      if (result.success) {
        console.log(
          `‚úÖ ${filename} index√© avec succ√®s: "${result.title}" (${
            result.year || "N/A"
          })`
        );
      } else {
        console.log(`‚ùå √âchec de l'indexation de ${filename}: ${result.error}`);
      }
    } catch (error) {
      console.error(`üí• Erreur lors de l'indexation de ${filename}:`, error);
    } finally {
      // Retirer de la file de traitement
      this.processingQueue.delete(filepath);
    }
  }

  // ========================================================================
  // M√âTHODES UTILITAIRES
  // ========================================================================

  /**
   * Forcer l'indexation d'un fichier sp√©cifique
   */
  async forceIndexFile(filepath: string): Promise<void> {
    try {
      const ext = path.extname(filepath).toLowerCase();

      if (
        !this.options.extensions.includes(
          ext as (typeof this.options.extensions)[number]
        )
      ) {
        throw createInvalidFileExtensionError(ext, this.options.extensions);
      }

      // V√©rifier que le fichier existe et est accessible
      await validateFolderPath(path.dirname(filepath));

      await this.processFile(filepath, "manual");
    } catch (error) {
      if (error instanceof Error && error.name === "AppError") {
        throw error; // Re-throw les erreurs de validation
      }
      throw createFileNotAccessibleError(filepath);
    }
  }

  /**
   * Indexer tous les fichiers existants (scan initial)
   */
  async indexExistingFiles(): Promise<void> {
    console.log("üîÑ Indexation des fichiers existants...");

    try {
      const results = await movieIndexingService.indexAllMovies();
      const successful = results.filter((r) => r.success).length;
      const failed = results.filter((r) => !r.success).length;

      console.log(`‚úÖ ${successful} fichiers index√©s, ${failed} √©checs`);
    } catch (error) {
      console.error(
        "‚ùå Erreur lors de l'indexation des fichiers existants:",
        error
      );
      throw error;
    }
  }
}

// Instance singleton du service
export const movieWatcherService = new MovieWatcherService();
