#!/usr/bin/env tsx

import { movieWatcherService } from "../services/movieWatcherService.js";
import { prisma } from "../utils/prisma.js";

/**
 * Script pour d√©marrer la surveillance automatique des fichiers de films
 * Utilise Chokidar pour d√©tecter les nouveaux fichiers et les indexer automatiquement
 */

// Gestion propre de l'arr√™t
process.on("SIGINT", async () => {
  console.log("\nüõë Signal d'arr√™t re√ßu, arr√™t de la surveillance...");
  await movieWatcherService.stop();
  await prisma.$disconnect();
  process.exit(0);
});

process.on("SIGTERM", async () => {
  console.log("\nüõë Signal de terminaison re√ßu, arr√™t de la surveillance...");
  await movieWatcherService.stop();
  await prisma.$disconnect();
  process.exit(0);
});

// Fonction principale
async function main() {
  try {
    console.log(
      "üé¨ D√©marrage du service de surveillance automatique des films"
    );
    console.log("==================================================");

    // D√©marrer la surveillance
    await movieWatcherService.start();

    console.log("\n‚úÖ Service de surveillance d√©marr√© avec succ√®s!");
    console.log(
      "üìÅ Les nouveaux fichiers seront automatiquement d√©tect√©s et index√©s"
    );
    console.log("üí° Appuyez sur Ctrl+C pour arr√™ter le service");

    // Garder le processus en vie
    process.stdin.resume();
  } catch (error) {
    console.error("‚ùå Erreur lors du d√©marrage du service:", error);
    await prisma.$disconnect();
    process.exit(1);
  }
}

// Gestion des erreurs non captur√©es
process.on("uncaughtException", async (error) => {
  console.error("üí• Erreur non captur√©e:", error);
  await movieWatcherService.stop();
  await prisma.$disconnect();
  process.exit(1);
});

process.on("unhandledRejection", async (reason, promise) => {
  console.error("üí• Promesse rejet√©e non g√©r√©e:", reason);
  await movieWatcherService.stop();
  await prisma.$disconnect();
  process.exit(1);
});

// Lancer le script si appel√© directement
if (import.meta.url === `file://${process.argv[1]}`) {
  main();
}

export { main as startMovieWatcher };
